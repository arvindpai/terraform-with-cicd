name: terraform-automation

on: [push, pull_request]

concurrency: 
  group: ${{ github.action == 'terraform-automation' }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash
    working-directory: ./examples

jobs:
  terraform_plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@master
      
      - name: Setup GCP Service Account
        uses: google-github-actions/setup-gcloud@master
        with:
          version: 'latest'
          service_account_email: ${{ secrets.GCP_SA_EMAIL }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: |
          chmod +x "${GITHUB_WORKSPACE}/.github/workflows/script.sh"
          "${GITHUB_WORKSPACE}/.github/workflows/script.sh"
          terraform plan -out "tf_plan"
          echo ${{ job.status }} > tf_plan_status.txt
      
      - name: Upload TF Plan
        uses: actions/upload-artifact@v2
        with:
          name: tf_plan
          path: ./examples
          if-no-files-found: error
      
      - name: Upload TF Plan Job Status
        uses: actions/upload-artifact@v2
        with:
          name: tf_plan_status.txt

  terraform_apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: terraform_plan
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: tf_apply

    steps: 
    - name: Checkout
      uses: actions/checkout@master

    - name: Setup GCP Service Account
      uses: google-github-actions/setup-gcloud@master
      with:
        version: 'latest'
        service_account_email: ${{ secrets.GCP_SA_EMAIL }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Download TF Plan
      uses: actions/download-artifact@v2
      with:
        name: tf_plan
        path: ./examples

    # Provision resources via Terraform        
    - name: Terraform Apply
      run: |
        ls -la
        chmod +x "${GITHUB_WORKSPACE}/.github/workflows/script.sh"
        "${GITHUB_WORKSPACE}/.github/workflows/script.sh"
        terraform init
        terraform show "tf_plan"
        terraform apply "tf_plan"
        rm "tf_plan"
        echo ${{ job.status }} > tf_apply_status.txt
    
    - name: Upload TF Apply Job Status
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: tf_apply_status.txt

  slack_notification:
    name: 'Slack Notification'
    runs-on: ubuntu-latest
    needs: [terraform_plan, terraform_apply]
    if: always()

    steps:
    - uses: actions/checkout@v2

    # Download Job Status Artifacts
    - name: Download TF Plan Status
      uses: actions/download-artifact@v2
      with:
        name: tf_plan_status.txt

    - name: Download TF Apply Job Status
      uses: actions/download-artifact@v2
      with:
        name: tf_apply_status.txt
    
    - name: Set the statuses of Job 01 and Job 02 as output parameters
      id: set_outputs
      run: |
        echo "::set-output name=terraform_plan::$(<terraform_plan/tf_plan_status.txt)"
        echo "::set-output name=terraform_apply::$(<terraform_apply/tf_apply_status.txt)"

    # - name: Show the values of the outputs
    #   run: |
    #     echo "terraform_plan = ${{ steps.set_outputs.outputs.terraform_plan }}"
    #     echo "terraform_apply = ${{ steps.set_outputs.outputs.terraform_apply }}"

    - name: Slack Notification
      uses: rtCamp/action-slack-notify@v2
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        SLACK_CHANNEL: captain-alert
        SLACK_COLOR: ${{ steps.set_outputs.outputs.terraform_apply }}
        SLACK_TITLE: ${{ github.repository }}
        SLACK_MESSAGE: ${{ github.event.head_commit.message }}
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_FOOTER: 'Terraform Github Actions Alert'
    
    - name: Slack Notification
      uses: rtCamp/action-slack-notify@v2
      if: github.event_name == 'pull_request'
      env:
        SLACK_CHANNEL: captain-alert
        SLACK_COLOR: ${{ steps.set_outputs.outputs.terraform_plan }}
        SLACK_TITLE: ${{ github.repository }}
        SLACK_MESSAGE: ${{ github.event.head_commit.message }}
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_FOOTER: 'Terraform Github Actions Alert'
